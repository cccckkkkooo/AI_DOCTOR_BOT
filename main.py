import telebot
from telebot import types
from g4f.client import Client

TOKEN = '7817694585:AAH-_iVN4J5VVhNpr1_P1WA2l4gW4YzkVg4'
bot = telebot.TeleBot(TOKEN)

client = Client()
topic = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ —Å–æ–≤–µ—Ç—ã, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∂–∞–ª–æ–±–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."

user_states = {}
user_dialogs = {}

questions = {
    1: "–ú–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?",
    2: "–ö–∞–∫ –¥–æ–ª–≥–æ —É –≤–∞—Å –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è —ç—Ç–∏ —Å–∏–º–ø—Ç–æ–º—ã?"
}

def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    help_button = types.KeyboardButton('Help')
    sos_button = types.KeyboardButton('SOS')
    markup.add(help_button, sos_button)
    return markup

@bot.message_handler(commands=['start'])
def send_welcome(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç!\n–Ø –ø–æ–º–æ—â–Ω–∏–∫ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –∑–¥–æ—Ä–æ–≤—å–µ, –≤–Ω–µ–¥—Ä–µ–Ω–Ω—ã–π –∫–æ–º–∞–Ω–¥–æ–π GPT WARRIORS.\n–ï—Å–ª–∏ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –ø–ª–æ—Ö–æ, –Ω–∞–∂–º–∏ Help", reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text == 'Help')
def handle_help(message):
    chat_id = message.chat.id
    user_states[chat_id] = 1
    user_dialogs[chat_id] = []
    bot.send_message(chat_id, questions[1])

@bot.message_handler(func=lambda message: message.text == 'SOS')
def handle_sos(message):
    chat_id = message.chat.id
    sos_message = (
        "–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã:\n"
        "üìû –ü–æ–ª–∏—Ü–∏—è: 102\n"
        "üìû –°–∫–æ—Ä–∞—è –ø–æ–º–æ—â—å: 103\n"
        "üìû –ü–æ–∂–∞—Ä–Ω–∞—è —Å–ª—É–∂–±–∞: 101\n"
        "üìû –ï–¥–∏–Ω—ã–π –Ω–æ–º–µ—Ä —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–ª—É–∂–±—ã: 112\n"
    )
    bot.send_message(chat_id, sos_message)

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    chat_id = message.chat.id

    if chat_id in user_states and user_states[chat_id] <= len(questions):
        stage = user_states[chat_id]

        user_dialogs[chat_id].append(message.text)

        if stage == 2:
            user_input = " ".join(user_dialogs[chat_id])
            full_message = f"{topic} {user_input}"

            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": full_message}]
            )

            bot.reply_to(message, response.choices[0].message.content)

            bot.send_message(chat_id, "–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å! –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–∂–º–∏—Ç–µ Help –∏–ª–∏ SOS.", reply_markup=main_menu())

            del user_states[chat_id]
            del user_dialogs[chat_id]
        else:
            user_states[chat_id] = stage + 1
            next_question = questions[stage + 1]
            bot.send_message(chat_id, next_question)

bot.polling()
